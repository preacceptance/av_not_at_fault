## perform additional exclusions for intervention
d_clean <- subset(d_clean, !(agent == "av" & intv == "yes" & intv_check_AV != "1,2"))
d_clean <- subset(d_clean, !(agent == "hdv" & intv == "yes" & intv_check != "1,2"))
## get number of participants AFTER exclusions:
n_final_all <- dim(d_clean)[1]
percent_excl_all <- (n_orig_all - n_final_all)/n_orig_all
n_excl_all <- n_orig_all - n_final_all
n_final <- as.list(table(d_clean$cond))
percent_excl <- as.list((table(d$cond) - table(d_clean$cond))/table(d$cond))
## duplicate AV condition vB liability column to match with HDV condition driver liability col
d_clean$vB_mf_sue_AV_intv_2 <- d_clean$vB_mf_sue_AV_intv_1 # duplicate
d_clean <- d_clean %>% relocate(vB_mf_sue_AV_intv_2, .after=vB_mf_sue_AV_intv_1) # move new column
d_clean$vB_mf_sue_AV_2 <- d_clean$vB_mf_sue_AV_1 # duplicate
d_clean <- d_clean %>% relocate(vB_mf_sue_AV_2, .after=vB_mf_sue_AV_1) # move new column
## get mean age and gender:
mean_age = mean(as.numeric(d$age), na.rm = TRUE) # removing NAs from the dataframe before computing mean
gender_f = table(d$gender)["2"]/sum(table(d$gender))
## ================================================================================================================
##                                                    SUBSETTING
## ================================================================================================================
## define new data frame to extract pre-processed data into:
d_merged <- array(dim=c(0, 11))
colnames(d_merged) <- c('vA_sue', 'vB_m_v_d_sue', 'vB_m_v_m_sue', 'vA_cntrfctl', 'vB_cntrfctl',
'avoid', 'comp1', 'comp2', 'age', 'agent_name', 'intv_appld')
d_merged <- as.data.frame(d_merged, stringsAsFactors=FALSE)
## select only the used columns
fixed_cols = c(79:80,84,102:103) # fixed columns - comp checks, age, conditions
d_merged[(dim(d_merged)[1]+1):(dim(d_merged)[1]+n_final$av_yes), ] <- subset(d_clean, cond == "av_yes")[c(44:49,fixed_cols)]
d_merged[(dim(d_merged)[1]+1):(dim(d_merged)[1]+n_final$hdv_yes), ] <- subset(d_clean, cond == "hdv_yes")[c(73:78,fixed_cols)]
d_merged[(dim(d_merged)[1]+1):(dim(d_merged)[1]+n_final$av_no), ] <- subset(d_clean, cond == "av_no")[c(29:34,fixed_cols)]
d_merged[(dim(d_merged)[1]+1):(dim(d_merged)[1]+n_final$hdv_no), ] <- subset(d_clean, cond == "hdv_no")[c(58:63,fixed_cols)]
# make columns numeric
d_merged[,1:9] <- lapply(d_merged[,1:9], as.numeric)
# average Veh. B counterfactual, and Veh. B could have avoided
d_merged$med <- (d_merged$vB_cntrfctl + d_merged$avoid) / 2
d_merged <- d_merged %>% relocate(med, .after=avoid)
# agent_n where av=1, human=2; intv_n where yes=1, no=2
d_merged$agent_n <- ifelse(d_merged$agent_name=="av", 1, 2)
d_merged$intv_n <- ifelse(d_merged$intv_appld=="yes", 1, 2)
## ================================================================================================================
##                                         DATA ANALYSIS - ANOVA
## ================================================================================================================
cor(d_merged[,1:7]) # check correlations between measures
## Additional check for discriminant validity
fit.model <- ' M1 =~ vB_cntrfctl
M2 =~ avoid '
fit <- cfa(fit.model, data = d_merged)
discriminantValidity(fit)
## Sue, Manufacturer vs Manufacturer (DV)
m_v_m_mod <- aov(vB_m_v_m_sue ~ as.factor(agent_n) * as.factor(intv_n), data = d_merged)
summary(m_v_m_mod)
anova_stats(m_v_m_mod)
# summary statistics
aggregate(vB_m_v_m_sue ~ agent_name, data = d_merged, FUN = mean)
aggregate(vB_m_v_m_sue ~ intv_appld, data = d_merged, FUN = mean)
## Sue, Manufacturer vs Driver (DV)
m_v_d_mod <- aov(vB_m_v_d_sue ~ as.factor(agent_n) * as.factor(intv_n), data = d_merged)
summary(m_v_d_mod)
anova_stats(m_v_d_mod)
# summary statistics
aggregate(vB_m_v_d_sue ~ agent_name, data = d_merged, FUN = mean)
aggregate(vB_m_v_d_sue ~ intv_appld, data = d_merged, FUN = mean)
## Vehicle B Counterfactual (M)
vB_countf_mod <- aov(vB_cntrfctl ~ as.factor(agent_n) * as.factor(intv_n), data = d_merged)
summary(vB_countf_mod)
anova_stats(vB_countf_mod)
# summary statistics
aggregate(vB_cntrfctl ~ agent_name, data = d_merged, FUN = mean)
aggregate(vB_cntrfctl ~ intv_appld, data = d_merged, FUN = mean)
## ================================================================================================================
##                                            DATA ANALYSIS - T-TESTS
## ================================================================================================================
## Sue, at-fault (DV)
t.test(vA_sue ~ agent_name, data = d_merged[d_merged$intv_appld=="yes", ])
t.test(vA_sue ~ agent_name, data = d_merged[d_merged$intv_appld=="no", ])
cohen.d(d_merged[d_merged$intv_appld=="yes", ]$vA_sue, d_merged[d_merged$intv_appld=="yes", ]$agent_name)
cohen.d(d_merged[d_merged$intv_appld=="no", ]$vA_sue, d_merged[d_merged$intv_appld=="no", ]$agent_name)
## Sue, Manufacturer vs Manufacturer (DV)
t.test(vB_m_v_m_sue ~ agent_name, data = d_merged[d_merged$intv_appld=="yes", ])
t.test(vB_m_v_m_sue ~ agent_name, data = d_merged[d_merged$intv_appld=="no", ])
cohen.d(d_merged[d_merged$intv_appld=="yes", ]$vB_m_v_m_sue, d_merged[d_merged$intv_appld=="yes", ]$agent_name)
cohen.d(d_merged[d_merged$intv_appld=="no", ]$vB_m_v_m_sue, d_merged[d_merged$intv_appld=="no", ]$agent_name)
## Sue, Manufacturer vs Driver (DV)
t.test(vB_m_v_d_sue ~ agent_name, data = d_merged[d_merged$intv_appld=="yes", ])
t.test(vB_m_v_d_sue ~ agent_name, data = d_merged[d_merged$intv_appld=="no", ])
cohen.d(d_merged[d_merged$intv_appld=="yes", ]$vB_m_v_d_sue, d_merged[d_merged$intv_appld=="yes", ]$agent_name)
cohen.d(d_merged[d_merged$intv_appld=="no", ]$vB_m_v_d_sue, d_merged[d_merged$intv_appld=="no", ]$agent_name)
## Vehicle A Counterfactual (M)
t.test(vA_cntrfctl ~ agent_name, data = d_merged[d_merged$intv_appld=="yes", ])
t.test(vA_cntrfctl ~ agent_name, data = d_merged[d_merged$intv_appld=="no", ])
cohen.d(d_merged[d_merged$intv_appld=="yes", ]$vA_cntrfctl, d_merged[d_merged$intv_appld=="yes", ]$agent_name)
cohen.d(d_merged[d_merged$intv_appld=="no", ]$vA_cntrfctl, d_merged[d_merged$intv_appld=="no", ]$agent_name)
## Vehicle B Counterfactual (M)
t.test(vB_cntrfctl ~ agent_name, data = d_merged[d_merged$intv_appld=="yes", ])
t.test(vB_cntrfctl ~ agent_name, data = d_merged[d_merged$intv_appld=="no", ])
cohen.d(d_merged[d_merged$intv_appld=="yes", ]$vB_cntrfctl, d_merged[d_merged$intv_appld=="yes", ]$agent_name)
cohen.d(d_merged[d_merged$intv_appld=="no", ]$vB_cntrfctl, d_merged[d_merged$intv_appld=="no", ]$agent_name)
# Could have done more to avoid (M)
t.test(avoid ~ agent_name, data = d_merged[d_merged$intv_appld=="yes", ])
t.test(avoid ~ agent_name, data = d_merged[d_merged$intv_appld=="no", ])
cohen.d(d_merged[d_merged$intv_appld=="yes", ]$avoid, d_merged[d_merged$intv_appld=="yes", ]$agent_name)
cohen.d(d_merged[d_merged$intv_appld=="no", ]$avoid, d_merged[d_merged$intv_appld=="no", ]$agent_name)
# Averaged mediator (M)
t.test(med ~ agent_name, data = d_merged[d_merged$intv_appld=="yes", ])
t.test(med ~ agent_name, data = d_merged[d_merged$intv_appld=="no", ])
cohen.d(d_merged[d_merged$intv_appld=="yes", ]$med, d_merged[d_merged$intv_appld=="yes", ]$agent_name)
cohen.d(d_merged[d_merged$intv_appld=="no", ]$med, d_merged[d_merged$intv_appld=="no", ]$agent_name)
## ================================================================================================================
##                                             MEDIATION ANALYSIS
## ================================================================================================================
mediation <- FALSE #change to true if you want to run this code
if(mediation) {
source("../process.R")
# test age as moderator
summary(lm(vB_m_v_m_sue ~ agent_n*age, data=d_merged))
# SERIAL MEDIATION
process(data = d_merged, y = "vB_m_v_m_sue", x = "agent_n",
m =c("vB_cntrfctl", "avoid"), model = 6, effsize =1, total =1, stand =1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
# MODERATED SERIAL MEDIATION
# the effect of intervention on A path (83)
process(data = d_merged, y = "vB_m_v_m_sue", x = "agent_n",
m =c("vB_cntrfctl", "avoid"), w = "intv_n", model = 83, effsize =1, total =1, stand =1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
# MODERATED SERIAL MEDIATION
#flipped mediators
# the effect of intervention on A path (83)
process(data = d_merged, y = "vB_m_v_m_sue", x = "agent_n",
m =c("avoid", "vB_cntrfctl"), w = "intv_n", model = 83, effsize =1, total =1, stand =1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
# MODERATED SERIAL MEDIATION
# the effect of intervention on center path (91)
process(data = d_merged, y = "vB_m_v_m_sue", x = "agent_n",
m =c("vB_cntrfctl", "avoid"), w = "intv_n", model = 91, effsize =1, total =1, stand =1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
# MODERATED MEDIATION (averaged mediators)
# the effect of intervention on A path (7)
process(data = d_merged, y = "vB_m_v_m_sue", x = "agent_n",
m =c("med"), w = "intv_n", model = 7, effsize =1, total =1, stand =1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
}
## ================================================================================================================
##                                              PLOTTING 2X2 FIGURE
## ================================================================================================================
t_labels <- c("No Intervention", "Intervention")
fill_labels <- c("AV", "HDV")
## Vehicle B Counterfactual (M)
p_val_L = t.test(vB_cntrfctl ~ agent_name, data = d_merged[d_merged$intv_appld=="no", ])$p.value
p_val_R = t.test(vB_cntrfctl ~ agent_name, data = d_merged[d_merged$intv_appld=="yes", ])$p.value
p1_3 <- plot_2x2(d_merged, x=intv_appld, y=vB_cntrfctl, fill=agent_name, p_val_L, p_val_R,
title="Consider Veh. B Counterfactual", t_labels, fill_labels)
p1_3
## Could have done more to avoid (M)
p_val_L = t.test(avoid ~ agent_name, data = d_merged[d_merged$intv_appld=="no", ])$p.value
p_val_R = t.test(avoid ~ agent_name, data = d_merged[d_merged$intv_appld=="yes", ])$p.value
p1_4 <- plot_2x2(d_merged, x=intv_appld, y=avoid, fill=agent_name, p_val_L, p_val_R,
title="Could Have Done More", t_labels, fill_labels)
p1_4
p1_3
p1_4
p1_3
p1_4
p1_3
p1_4
## clear workspace
rm(list = ls())
options(download.file.method="libcurl") # sets method for downloading files
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set working directory to current directory
source("../common.R") # install packages; import common plotting functions
## ================================================================================================================
##                                                  PRE-PROCESSING
## ================================================================================================================
## read in data:
d <- read.csv('e3_intervention.csv')
## explore dataframe:
dim(d) # will provide dimensions of the dataframe by row [1] and column [2]
colnames(d)
summary(d)
## perform attention exclusions:
# this will remove responses from the dataframe that failed attention checks (i.e., "1" or "2")
d <- subset(d, (d$att1 == 2 & d$att2 == 2))
dim(d) # number of participants should decrease after attention exclusions
## new columns to label agent (av/hdv), scenario (cnstr/uncnstr), and condition (combination of the 2)
d$agent <- ifelse(d$FL_92_DO %in% c("FL_94", "FL_93"), "av", "hdv") #if FL_92 is empty = hdv
d$intv <- ifelse(d$FL_92_DO == "FL_94" | d$FL_98_DO == "FL_100", "yes", "no") #FL_93/99 -> no intv
d$cond <- paste(d$agent, d$intv, sep="_")
## get number of participants before comp exclusions
n_orig_all <- dim(d)[1]
n_orig <- as.list(table(d$cond))
## perform comp exclusions
d_clean <- d
d_clean <- subset(d_clean, comp_accident == 1) # include only comp check 2 passes
d_clean <- subset(d_clean, !(agent == "av" & comp1 != 1)) # remove comp check 1 fails for av
d_clean <- subset(d_clean, !(agent == "hdv" & comp1 != 2)) # remove comp check 1 fails for hdv
## perform additional exclusions for intervention
d_clean <- subset(d_clean, !(agent == "av" & intv == "yes" & intv_check_AV != "1,2"))
d_clean <- subset(d_clean, !(agent == "hdv" & intv == "yes" & intv_check != "1,2"))
## get number of participants AFTER exclusions:
n_final_all <- dim(d_clean)[1]
percent_excl_all <- (n_orig_all - n_final_all)/n_orig_all
n_excl_all <- n_orig_all - n_final_all
n_final <- as.list(table(d_clean$cond))
percent_excl <- as.list((table(d$cond) - table(d_clean$cond))/table(d$cond))
## duplicate AV condition vB liability column to match with HDV condition driver liability col
d_clean$vB_mf_sue_AV_intv_2 <- d_clean$vB_mf_sue_AV_intv_1 # duplicate
d_clean <- d_clean %>% relocate(vB_mf_sue_AV_intv_2, .after=vB_mf_sue_AV_intv_1) # move new column
d_clean$vB_mf_sue_AV_2 <- d_clean$vB_mf_sue_AV_1 # duplicate
d_clean <- d_clean %>% relocate(vB_mf_sue_AV_2, .after=vB_mf_sue_AV_1) # move new column
## get mean age and gender:
mean_age = mean(as.numeric(d$age), na.rm = TRUE) # removing NAs from the dataframe before computing mean
gender_f = table(d$gender)["2"]/sum(table(d$gender))
## ================================================================================================================
##                                                    SUBSETTING
## ================================================================================================================
## define new data frame to extract pre-processed data into:
d_merged <- array(dim=c(0, 11))
colnames(d_merged) <- c('vA_sue', 'vB_m_v_d_sue', 'vB_m_v_m_sue', 'vA_cntrfctl', 'vB_cntrfctl',
'avoid', 'comp1', 'comp2', 'age', 'agent_name', 'intv_appld')
d_merged <- as.data.frame(d_merged, stringsAsFactors=FALSE)
## select only the used columns
fixed_cols = c(79:80,84,102:103) # fixed columns - comp checks, age, conditions
d_merged[(dim(d_merged)[1]+1):(dim(d_merged)[1]+n_final$av_yes), ] <- subset(d_clean, cond == "av_yes")[c(44:49,fixed_cols)]
d_merged[(dim(d_merged)[1]+1):(dim(d_merged)[1]+n_final$hdv_yes), ] <- subset(d_clean, cond == "hdv_yes")[c(73:78,fixed_cols)]
d_merged[(dim(d_merged)[1]+1):(dim(d_merged)[1]+n_final$av_no), ] <- subset(d_clean, cond == "av_no")[c(29:34,fixed_cols)]
d_merged[(dim(d_merged)[1]+1):(dim(d_merged)[1]+n_final$hdv_no), ] <- subset(d_clean, cond == "hdv_no")[c(58:63,fixed_cols)]
# make columns numeric
d_merged[,1:9] <- lapply(d_merged[,1:9], as.numeric)
# average Veh. B counterfactual, and Veh. B could have avoided
d_merged$med <- (d_merged$vB_cntrfctl + d_merged$avoid) / 2
d_merged <- d_merged %>% relocate(med, .after=avoid)
# agent_n where av=1, human=2; intv_n where yes=1, no=2
d_merged$agent_n <- ifelse(d_merged$agent_name=="av", 1, 2)
d_merged$intv_n <- ifelse(d_merged$intv_appld=="yes", 1, 2)
## ================================================================================================================
##                                         DATA ANALYSIS - ANOVA
## ================================================================================================================
cor(d_merged[,1:7]) # check correlations between measures
d_merged$intv_appld
cor(d_merged[,1:7]) # check correlations between measures
cor(subset(d_merged, cor(d_merged[,1:7])) # check correlations between measures
cor(subset(d_merged, intv_appld=="yes")[,1:7])) # check correlations between measures
cor(subset(d_merged, cor(d_merged[,1:7]))) # check correlations between measures
cor(subset(d_merged, intv_appld=="yes")[,1:7]) # check correlations between measures
cor(subset(d_merged, intv_appld=="yes")[,1:7]) # check correlations between measures
cor(subset(d_merged, intv_appld=="no")[,1:7]) # check correlations between measures
cor(subset(d_merged, intv_appld=="yes")[,1:7]) # check correlations between measures
cor(subset(d_merged, intv_appld=="no")[,1:7]) # check correlations between measures
## Additional check for discriminant validity
cor.test(d_merged$vB_cntrfctl, d_merged$avoid)
## clear workspace
rm(list = ls())
options(download.file.method="libcurl") # sets method for downloading files
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set working directory to current directory
source("../common.R") # install packages; import common plotting functions
## ================================================================================================================
##                                                  PRE-PROCESSING
## ================================================================================================================
## read in data:
d <- read.csv('e3_intervention.csv')
## explore dataframe:
dim(d) # will provide dimensions of the dataframe by row [1] and column [2]
colnames(d)
summary(d)
## perform attention exclusions:
# this will remove responses from the dataframe that failed attention checks (i.e., "1" or "2")
d <- subset(d, (d$att1 == 2 & d$att2 == 2))
dim(d) # number of participants should decrease after attention exclusions
## new columns to label agent (av/hdv), scenario (cnstr/uncnstr), and condition (combination of the 2)
d$agent <- ifelse(d$FL_92_DO %in% c("FL_94", "FL_93"), "av", "hdv") #if FL_92 is empty = hdv
d$intv <- ifelse(d$FL_92_DO == "FL_94" | d$FL_98_DO == "FL_100", "yes", "no") #FL_93/99 -> no intv
d$cond <- paste(d$agent, d$intv, sep="_")
## get number of participants before comp exclusions
n_orig_all <- dim(d)[1]
n_orig <- as.list(table(d$cond))
## perform comp exclusions
d_clean <- d
d_clean <- subset(d_clean, comp_accident == 1) # include only comp check 2 passes
d_clean <- subset(d_clean, !(agent == "av" & comp1 != 1)) # remove comp check 1 fails for av
d_clean <- subset(d_clean, !(agent == "hdv" & comp1 != 2)) # remove comp check 1 fails for hdv
## perform additional exclusions for intervention
d_clean <- subset(d_clean, !(agent == "av" & intv == "yes" & intv_check_AV != "1,2"))
d_clean <- subset(d_clean, !(agent == "hdv" & intv == "yes" & intv_check != "1,2"))
## get number of participants AFTER exclusions:
n_final_all <- dim(d_clean)[1]
percent_excl_all <- (n_orig_all - n_final_all)/n_orig_all
n_excl_all <- n_orig_all - n_final_all
n_final <- as.list(table(d_clean$cond))
percent_excl <- as.list((table(d$cond) - table(d_clean$cond))/table(d$cond))
## duplicate AV condition vB liability column to match with HDV condition driver liability col
d_clean$vB_mf_sue_AV_intv_2 <- d_clean$vB_mf_sue_AV_intv_1 # duplicate
d_clean <- d_clean %>% relocate(vB_mf_sue_AV_intv_2, .after=vB_mf_sue_AV_intv_1) # move new column
d_clean$vB_mf_sue_AV_2 <- d_clean$vB_mf_sue_AV_1 # duplicate
d_clean <- d_clean %>% relocate(vB_mf_sue_AV_2, .after=vB_mf_sue_AV_1) # move new column
## get mean age and gender:
mean_age = mean(as.numeric(d$age), na.rm = TRUE) # removing NAs from the dataframe before computing mean
gender_f = table(d$gender)["2"]/sum(table(d$gender))
## ================================================================================================================
##                                                    SUBSETTING
## ================================================================================================================
## define new data frame to extract pre-processed data into:
d_merged <- array(dim=c(0, 11))
colnames(d_merged) <- c('vA_sue', 'vB_m_v_d_sue', 'vB_m_v_m_sue', 'vA_cntrfctl', 'vB_cntrfctl',
'avoid', 'comp1', 'comp2', 'age', 'agent_name', 'intv_appld')
d_merged <- as.data.frame(d_merged, stringsAsFactors=FALSE)
## select only the used columns
fixed_cols = c(79:80,84,102:103) # fixed columns - comp checks, age, conditions
d_merged[(dim(d_merged)[1]+1):(dim(d_merged)[1]+n_final$av_yes), ] <- subset(d_clean, cond == "av_yes")[c(44:49,fixed_cols)]
d_merged[(dim(d_merged)[1]+1):(dim(d_merged)[1]+n_final$hdv_yes), ] <- subset(d_clean, cond == "hdv_yes")[c(73:78,fixed_cols)]
d_merged[(dim(d_merged)[1]+1):(dim(d_merged)[1]+n_final$av_no), ] <- subset(d_clean, cond == "av_no")[c(29:34,fixed_cols)]
d_merged[(dim(d_merged)[1]+1):(dim(d_merged)[1]+n_final$hdv_no), ] <- subset(d_clean, cond == "hdv_no")[c(58:63,fixed_cols)]
# make columns numeric
d_merged[,1:9] <- lapply(d_merged[,1:9], as.numeric)
# average Veh. B counterfactual, and Veh. B could have avoided
d_merged$med <- (d_merged$vB_cntrfctl + d_merged$avoid) / 2
d_merged <- d_merged %>% relocate(med, .after=avoid)
# agent_n where av=1, human=2; intv_n where yes=1, no=2
d_merged$agent_n <- ifelse(d_merged$agent_name=="av", 1, 2)
d_merged$intv_n <- ifelse(d_merged$intv_appld=="yes", 1, 2)
## ================================================================================================================
##                                         DATA ANALYSIS - ANOVA
## ================================================================================================================
cor(d_merged[,1:7]) # check correlations between measures
cor(subset(d_merged, cor(d_merged[,1:7]))) # check correlations between measures
cor(d_merged[,1:7]) # check correlations between measures
cor(subset(d_merged, intv_appld=="yes")[,1:7]) # check correlations between measures
cor(subset(d_merged, intv_appld=="no")[,1:7]) # check correlations between measures
## Additional check for discriminant validity
cor.test(d_merged$vB_cntrfctl, d_merged$avoid)
## Sue, Manufacturer vs Manufacturer (DV)
m_v_m_mod <- aov(vB_m_v_m_sue ~ as.factor(agent_n) * as.factor(intv_n), data = d_merged)
summary(m_v_m_mod)
anova_stats(m_v_m_mod)
# summary statistics
aggregate(vB_m_v_m_sue ~ agent_name, data = d_merged, FUN = mean)
aggregate(vB_m_v_m_sue ~ intv_appld, data = d_merged, FUN = mean)
## Sue, Manufacturer vs Driver (DV)
m_v_d_mod <- aov(vB_m_v_d_sue ~ as.factor(agent_n) * as.factor(intv_n), data = d_merged)
summary(m_v_d_mod)
anova_stats(m_v_d_mod)
# summary statistics
aggregate(vB_m_v_d_sue ~ agent_name, data = d_merged, FUN = mean)
aggregate(vB_m_v_d_sue ~ intv_appld, data = d_merged, FUN = mean)
## Vehicle B Counterfactual (M)
vB_countf_mod <- aov(vB_cntrfctl ~ as.factor(agent_n) * as.factor(intv_n), data = d_merged)
summary(vB_countf_mod)
anova_stats(vB_countf_mod)
# summary statistics
aggregate(vB_cntrfctl ~ agent_name, data = d_merged, FUN = mean)
aggregate(vB_cntrfctl ~ intv_appld, data = d_merged, FUN = mean)
## Sue, at-fault (DV)
t.test(vA_sue ~ agent_name, data = d_merged[d_merged$intv_appld=="yes", ])
t.test(vA_sue ~ agent_name, data = d_merged[d_merged$intv_appld=="no", ])
cohen.d(d_merged[d_merged$intv_appld=="yes", ]$vA_sue, d_merged[d_merged$intv_appld=="yes", ]$agent_name)
cohen.d(d_merged[d_merged$intv_appld=="no", ]$vA_sue, d_merged[d_merged$intv_appld=="no", ]$agent_name)
## Sue, Manufacturer vs Manufacturer (DV)
t.test(vB_m_v_m_sue ~ agent_name, data = d_merged[d_merged$intv_appld=="yes", ])
t.test(vB_m_v_m_sue ~ agent_name, data = d_merged[d_merged$intv_appld=="no", ])
cohen.d(d_merged[d_merged$intv_appld=="yes", ]$vB_m_v_m_sue, d_merged[d_merged$intv_appld=="yes", ]$agent_name)
cohen.d(d_merged[d_merged$intv_appld=="no", ]$vB_m_v_m_sue, d_merged[d_merged$intv_appld=="no", ]$agent_name)
## Sue, Manufacturer vs Driver (DV)
t.test(vB_m_v_d_sue ~ agent_name, data = d_merged[d_merged$intv_appld=="yes", ])
t.test(vB_m_v_d_sue ~ agent_name, data = d_merged[d_merged$intv_appld=="no", ])
cohen.d(d_merged[d_merged$intv_appld=="yes", ]$vB_m_v_d_sue, d_merged[d_merged$intv_appld=="yes", ]$agent_name)
cohen.d(d_merged[d_merged$intv_appld=="no", ]$vB_m_v_d_sue, d_merged[d_merged$intv_appld=="no", ]$agent_name)
## Vehicle A Counterfactual (M)
t.test(vA_cntrfctl ~ agent_name, data = d_merged[d_merged$intv_appld=="yes", ])
t.test(vA_cntrfctl ~ agent_name, data = d_merged[d_merged$intv_appld=="no", ])
cohen.d(d_merged[d_merged$intv_appld=="yes", ]$vA_cntrfctl, d_merged[d_merged$intv_appld=="yes", ]$agent_name)
cohen.d(d_merged[d_merged$intv_appld=="no", ]$vA_cntrfctl, d_merged[d_merged$intv_appld=="no", ]$agent_name)
## Vehicle B Counterfactual (M)
t.test(vB_cntrfctl ~ agent_name, data = d_merged[d_merged$intv_appld=="yes", ])
t.test(vB_cntrfctl ~ agent_name, data = d_merged[d_merged$intv_appld=="no", ])
cohen.d(d_merged[d_merged$intv_appld=="yes", ]$vB_cntrfctl, d_merged[d_merged$intv_appld=="yes", ]$agent_name)
cohen.d(d_merged[d_merged$intv_appld=="no", ]$vB_cntrfctl, d_merged[d_merged$intv_appld=="no", ]$agent_name)
# Could have done more to avoid (M)
t.test(avoid ~ agent_name, data = d_merged[d_merged$intv_appld=="yes", ])
t.test(avoid ~ agent_name, data = d_merged[d_merged$intv_appld=="no", ])
cohen.d(d_merged[d_merged$intv_appld=="yes", ]$avoid, d_merged[d_merged$intv_appld=="yes", ]$agent_name)
cohen.d(d_merged[d_merged$intv_appld=="no", ]$avoid, d_merged[d_merged$intv_appld=="no", ]$agent_name)
# Averaged mediator (M)
t.test(med ~ agent_name, data = d_merged[d_merged$intv_appld=="yes", ])
t.test(med ~ agent_name, data = d_merged[d_merged$intv_appld=="no", ])
cohen.d(d_merged[d_merged$intv_appld=="yes", ]$med, d_merged[d_merged$intv_appld=="yes", ]$agent_name)
cohen.d(d_merged[d_merged$intv_appld=="no", ]$med, d_merged[d_merged$intv_appld=="no", ]$agent_name)
mediation <- FALSE #change to true if you want to run this code
source("../process.R")
# MODERATED MEDIATION (averaged mediators)
# the effect of intervention on A path (7)
process(data = d_merged, y = "vB_m_v_m_sue", x = "agent_n",
m =c("vB_cntrfctl"), w = "intv_n", model = 7, effsize =1, total =1, stand =1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
## clear workspace
rm(list = ls())
options(download.file.method="libcurl") # sets method for downloading files
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set working directory to current directory
source("../common.R") # install packages; import common plotting functions
## ================================================================================================================
##                                                  PRE-PROCESSING
## ================================================================================================================
## read in data:
d <- read.csv('e1_effect.csv')
## explore dataframe:
dim(d) # will provide dimensions of the dataframe by row [1] and column [2]
colnames(d)
summary(d)
## perform attention exclusions:
# this will remove responses from the dataframe that failed attention checks (i.e., "1" or "2")
d <- subset(d, (d$att1 == 2 & d$att2 == 2))
dim(d) # number of participants should decrease after attention exclusions
## new column to label agent (av/hdv) condition
d$cond <- ifelse(d$FL_4_DO == "FL_39", "av", "hdv") #if FL_40 -> HDV
## get number of participants before comp exclusions
n_orig_all <- dim(d)[1]
n_orig <- as.list(table(d$cond))
## perform comp exclusions
d_clean <- d
d_clean <- subset(d_clean, cruise_familiarity == 2) # remove participants who recognized scenario
d_clean <- subset(d_clean, comp_accident == 1) # include only comp check 2 passes
d_clean <- subset(d_clean, !(cond == "av" & comp1 != 1)) # remove comp check 1 fails for av
d_clean <- subset(d_clean, !(cond == "hdv" & comp1 != 2)) # remove comp check 1 fails for hdv
## get number of participants AFTER exclusions:
n_final_all <- dim(d_clean)[1]
percent_excl_all <- (n_orig_all - n_final_all)/n_orig_all
n_excl_all <- n_orig_all - n_final_all
n_final <- as.list(table(d_clean$cond))
percent_excl <- as.list((table(d$cond) - table(d_clean$cond))/table(d$cond))
## duplicate AV condition vB liability column to match with HDV condition driver liability col
d_clean$vB_mnfctr_sue_AV_2 <- d_clean$vB_mnfctr_sue_AV_1 # duplicate
d_clean <- d_clean %>% relocate(vB_mnfctr_sue_AV_2, .after=vB_mnfctr_sue_AV_1) # move new column
## get mean age and gender:
mean_age = mean(as.numeric(d$age), na.rm = TRUE) # removing NAs from the dataframe before computing mean
gender_f = table(d$gender)["2"]/sum(table(d$gender))
## ================================================================================================================
##                                                    SUBSETTING
## ================================================================================================================
## define new data frame to extract pre-processed data into:
d_merged <- array(dim=c(0, 11))
colnames(d_merged) <- c('vA_sue', 'vB_m_v_d_sue', 'vB_m_v_m_sue', 'vA_cntrfctl', 'vB_cntrfctl',
'avoid', 'comp1', 'comp2', 'mod', 'age', 'cond_name')
d_merged <- as.data.frame(d_merged, stringsAsFactors=FALSE)
## assess moderator data
moderator_mat = d_clean[21:25]
moderator_mat$av_trust_5_1 = 100 - as.numeric(moderator_mat$av_trust_5_1) # reverse code one moderator
moderator_mat <- data.frame(sapply(moderator_mat, as.numeric))
cb_alpha = cronbach.alpha(moderator_mat) # calculate cronbach alpha
d_clean$moderator <- rowMeans(moderator_mat) # averaged moderator measure
d_clean <- d_clean %>% relocate(moderator, .after=comp_accident) # move moderator measure
## select only the used columns
fixed_cols = c(46:48,53,62) # fixed columns - comp checks + mod, age, conditions
d_merged[(dim(d_merged)[1]+1):(dim(d_merged)[1]+n_final$av), ] <- subset(d_clean, cond == "av")[c(30:35,fixed_cols)]
d_merged[(dim(d_merged)[1]+1):(dim(d_merged)[1]+n_final$hdv), ] <- subset(d_clean, cond == "hdv")[c(40:45,fixed_cols)]
# make columns numeric
d_merged[,1:10] <- lapply(d_merged[,1:10], as.numeric)
# average Veh. B counterfactual, and Veh. B could have avoided
d_merged$med <- (d_merged$vB_cntrfctl + d_merged$avoid) / 2
d_merged <- d_merged %>% relocate(med, .after=avoid)
## assign trust levels where low trust=1, high trust=2
d_merged$trust_level <- ifelse(d_merged$mod>50, "high", "low")
d_merged$trust_level_n <- ifelse(d_merged$trust_level=="high",2,1)
# cond_n where av=1, human=2
d_merged$cond_n <- ifelse(d_merged$cond_name=="av", 1, 2)
## ================================================================================================================
##                                             DATA ANALYSIS - T-TESTS
## ================================================================================================================
cor(d_merged[,c(1:7,10)]) # check correlations between measures
## Additional check for discriminant validity
cor.test(d_merged$vB_cntrfctl, d_merged$avoid)
## Sue, at-fault (DV)
t.test(vA_sue ~ cond_name, data = d_merged)
aggregate(vA_sue ~ cond_name, data = d_merged, FUN = sd)
cohen.d(d_merged$vA_sue, d_merged$cond_name)
## Sue, Manufacturer vs Manufacturer (DV)
t.test(vB_m_v_m_sue ~ cond_name, data = d_merged)
aggregate(vB_m_v_m_sue ~ cond_name, data = d_merged, FUN = sd)
cohen.d(d_merged$vB_m_v_m_sue, d_merged$cond_name)
## Sue, Manufacturer vs Driver (DV)
t.test(vB_m_v_d_sue ~ cond_name, data = d_merged)
aggregate(vB_m_v_d_sue ~ cond_name, data = d_merged, FUN = sd)
cohen.d(d_merged$vB_m_v_d_sue, d_merged$cond_name)
## Vehicle A Counterfactual (M)
t.test(vA_cntrfctl ~ cond_name, data = d_merged)
aggregate(vA_cntrfctl ~ cond_name, data = d_merged, FUN = sd)
cohen.d(d_merged$vA_cntrfctl, d_merged$cond_name)
## Vehicle B Counterfactual (M)
t.test(vB_cntrfctl ~ cond_name, data = d_merged)
aggregate(vB_cntrfctl ~ cond_name, data = d_merged, FUN = sd)
cohen.d(d_merged$vB_cntrfctl, d_merged$cond_name)
# Could have done more to avoid (M)
t.test(avoid ~ cond_name, data = d_merged)
aggregate(avoid ~ cond_name, data = d_merged, FUN = sd)
cohen.d(d_merged$avoid, d_merged$cond_name)
# Averaged mediator (M)
t.test(med ~ cond_name, data = d_merged)
aggregate(med ~ cond_name, data = d_merged, FUN = sd)
cohen.d(d_merged$med, d_merged$cond_name)
# Trust (MOD)
t.test(mod ~ cond_name, data = d_merged)
aggregate(mod ~ cond_name, data = d_merged, FUN = sd)
cohen.d(d_merged$mod, d_merged$cond_name)
## trust agreement with counterfactual
t.test(vB_cntrfctl ~ trust_level_n, data = d_merged[d_merged$cond_name=="av", ])
t.test(vB_cntrfctl ~ trust_level_n, data = d_merged[d_merged$cond_name=="hdv", ])
## ================================================================================================================
##                                             MEDIATION ANALYSIS
## ================================================================================================================
mediation <- FALSE #change to true if you want to run this code
source("../process.R")
# PARALLEL MEDIATION
# investigate alternative mediation
process(data = d_merged, y = "vB_m_v_m_sue", x = "cond_n",
m =c("vB_cntrfctl"), model = 4, effsize =1, total =1, stand =1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
